<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Lelewel Letters</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="lelewel.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-03-01Z">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="lelewel" source="teipublisher.odd"> <elementSpec ident="pb" mode="change">
                    <model predicate="@facs" behaviour="webcomponent">
            <param name="name" value="'pb-facs-link'"/>
            <param name="label" value="@n"/>
            <param name="emit" value="'transcription'"/>
            <param name="emit-on-load" value="'emit-on-load'"/>
            <param name="order" value="let $pb := $get(.) return 1 + count($pb/preceding::pb)  "/>
        </model>
                    <model predicate="starts-with(@facs, 'iiif:')" behaviour="webcomponent">
            <param name="facs" value="replace(@facs, '^iiif:(.*)$', '$1')"/>
            <param name="emit" value="'transcription'"/>
            <param name="name" value="'pb-facs-link'"/>
            <param name="label" value="'foo'"/>
        </model>
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'page'"/>
            <param name="label" value="(concat(if(@n) then concat(@n,' ') else '',if(@facs) then                   concat('@',@facs) else ''))"/>
            <outputRendition xml:space="preserve">
            display: block; margin-left: 4pt; color: grey; float: right;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: '[Page ';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: ']';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="app" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="lem"/>
            <param name="alternate" value="(rdg || &#34; (&#34;, rdg/@wit, &#34;)&#34;)"/>
        </model>
                </elementSpec>
            <elementSpec ident="lb" mode="change">
                    <model output="print" behaviour="omit"/>
                    <modelSequence predicate="@break">
            <model behaviour="inline" cssClass="lb-hyphen">
                <param name="content" value="'-'"/>
            </model>
            <model behaviour="break" cssClass="lb">
                <param name="type" value="'line'"/>
                <param name="label" value="@n"/>
            </model>
        </modelSequence>
                    <model behaviour="break" cssClass="lb" useSourceRendition="true">
            <param name="type" value="'line'"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
            <elementSpec ident="persName" mode="add">
                    <model predicate="$parameters?person-note=&#34;yes&#34; and @type='main'" behaviour="pass-through">
            <pb:template xmlns="" xml:space="preserve"><h2>[[content]]</h2></pb:template>
        </model>
                    <model predicate="$parameters?entity=&#34;yes&#34;" behaviour="block"/>
                    <model predicate="@ref" behaviour="pass-through" cssClass="index person" pb:mode="person-note">
            <param name="alternate" value="id(@ref, doc($global:data-root || '/registers/persons.xml'))"/>
            <param name="default" value="."/>
            <pb:set-param name="person-note" value="&#34;yes&#34;"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover class="index person" theme="light">
                        <span slot="default">[[default]]</span>
                            <template slot="alternate">
                                [[alternate]]
                            </template>
                        </pb-popover></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model predicate="ancestor::person" behaviour="inline"/>
                    <model predicate="ancestor::place and @type='sort'" behaviour="omit"/>
                    <model predicate="ancestor::place" behaviour="block"/>
                    <model predicate="@ref" behaviour="pass-through" cssClass="index place">
            <param name="default" value="."/>
            <param name="alternate" value="id(@ref, doc($global:data-root || '/registers/places.xml'))"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover class="index person" theme="light">
                        <span slot="default">[[default]]</span>
                            <template slot="alternate">
                                [[alternate]]
                            </template>
</pb-popover></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="@type=&#34;pwn&#34;" behaviour="link" cssClass="ref-pwn">
            <param name="uri" value="@target"/>
            <param name="target" value="'_blank'"/>
        </model>
                    <model predicate="@type=&#34;lelewel&#34;" behaviour="link" cssClass="ref-lelewel">
            <param name="uri" value="@target"/>
            <param name="target" value="'_blank'"/>
        </model>
                    <model predicate="not(@target)" behaviour="inline"/>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model output="print" behaviour="inline">
            <param name="content" value="(corr, reg, expan)"/>
        </model>
                    <model predicate="$parameters?view1=&#34;transcription&#34;" behaviour="alternate" cssClass="choice">
            <param name="default" value="(corr, reg, expan, seg)"/>
            <param name="alternate" value="(orig, sic, abbr)"/>
        </model>
                    <model predicate="$parameters?view2='transliteration'" behaviour="alternate">
            <param name="default" value="(sic, abbr, orig)"/>
            <param name="alternate" value="(corr, expan, reg, seg)"/>
        </model>
                    <model predicate="orig and seg" behaviour="alternate">
            <param name="default" value="orig"/>
            <param name="alternate" value="seg"/>
        </model>
                    <model predicate="$parameters?mode='norm' and sic and corr" behaviour="alternate" cssClass="choice">
            <param name="default" value="sic[1]"/>
            <param name="alternate" value="corr[1]"/>
        </model>
                    <modelSequence predicate="sic and corr">
            <model behaviour="alternate" cssClass="choice">
                <param name="default" value="sic[1]"/>
                <param name="alternate" value="corr[1]"/>
            </model>
            <model behaviour="alternate" cssClass="choice-alternate">
                <param name="default" value="corr[1]"/>
                <param name="alternate" value="sic[1]"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?mode='norm' and abbr and expan" behaviour="alternate" cssClass="choice">
            <param name="default" value="expan[1]"/>
            <param name="alternate" value="abbr[1]"/>
        </model>
                    <modelSequence predicate="abbr and expan">
            <model behaviour="alternate" cssClass="choice">
                <param name="default" value="abbr[1]"/>
                <param name="alternate" value="expan[1]"/>
            </model>
            <model behaviour="alternate" cssClass="choice-alternate">
                <param name="default" value="expan[1]"/>
                <param name="alternate" value="abbr[1]"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?mode='norm' and orig and reg" behaviour="alternate" cssClass="choice">
            <param name="default" value="reg[1]"/>
            <param name="alternate" value="orig[1]"/>
        </model>
                    <modelSequence predicate="orig and reg">
            <model behaviour="alternate" cssClass="choice">
                <param name="default" value="orig[1]"/>
                <param name="alternate" value="reg[1]"/>
            </model>
            <model behaviour="alternate" cssClass="choice-alternate">
                <param name="default" value="reg[1]"/>
                <param name="alternate" value="orig[1]"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="teiHeader" mode="change">
                    <model predicate="$parameters?display='commentary'" behaviour="block">
            <param name="title" value="fileDesc/titleStmt/title[not(@type)]/string()"/>
            <param name="sender" value="descendant::persName[@role eq 'sender']/string()"/>
            <param name="addressee" value="descendant::persName[@role eq 'addressee']/string()"/>
            <param name="place" value="descendant::correspAction/placeName/string()"/>
            <param name="letterNr" value="fileDesc/titleStmt/title[@type eq 'letterNr']/string()"/>
            <param name="date" value="descendant::correspAction/date"/>
            <param name="dateShown" value="if (descendant::correspAction/date/text()) then descendant::correspAction/date/string() else 'n/a'"/>
            <param name="locusMs" value="descendant::msDesc/locus/string()"/>
            <param name="witness" value="fileDesc/sourceDesc/descendant::witness"/>
            <param name="respStmt" value="descendant::respStmt"/>
            <param name="archive" value="fileDesc/sourceDesc/descendant::institution/string()"/>
            <param name="catalogNr" value="fileDesc/sourceDesc/descendant::idno[@type eq 'catalogNr']/string()"/>
            <param name="sourceType" value="fileDesc/descendant::msDesc/@type"/>
            <pb:template xmlns="" xml:space="preserve"><div class="metadata">  
  <h2><pb-i18n key="metadata.headDocument"/></h2>
  <table>
     <tr>
      <th><pb-i18n key="metadata.letterNr"/></th>
      <td>[[letterNr]]</td>
    </tr>
    <tr>
      <th><pb-i18n key="metadata.sender"/></th>
      <td>[[sender]]</td>
    </tr>
    <tr>
      <th><pb-i18n key="metadata.addressee"/></th>
      <td>[[addressee]]</td>
    </tr>
    <tr>
      <th><pb-i18n key="metadata.place"/></th>
      <td>[[place]]</td>
    </tr>
     [[date]]
     <tr>
      <th><pb-i18n key="metadata.dateShown"/></th>
      <td>[[dateShown]]</td>
    </tr>
    </table>
     <h2><pb-i18n key="metadata.headSource"/></h2>
    <table>
     <tr>
      <th><pb-i18n key="metadata.sourceType"/></th>
      <td>[[sourceType]]</td>
    </tr>
     <tr>
      <th><pb-i18n key="metadata.archive"/></th>
      <td>[[archive]]</td>
    </tr>
     <tr>
      <th><pb-i18n key="metadata.msIdno"/></th>
      <td>[[catalogNr]]</td>
    </tr>
     <tr>
      <th><pb-i18n key="metadata.locus"/></th>
      <td>[[locusMs]]</td>
    </tr>
  </table>
  <h2><pb-i18n key="metadata.headWit"/></h2>
  <table>
    <thead>
      <tr>
       <th><pb-i18n key="metadata.siglum"/></th>
       <th><pb-i18n key="metadata.locusWit"/></th>
       <th><pb-i18n key="metadata.nrWit"/></th>
      </tr>
    </thead>
     <tbody>
       [[witness]]
     </tbody>
  </table>

  <h2><pb-i18n key="metadata.headCollab"/></h2>
  <table>
    <thead>
      <tr>
       <th><pb-i18n key="metadata.dateCollab"/></th>
       <th><pb-i18n key="metadata.role"/></th>
       <th><pb-i18n key="metadata.collaborator"/></th>
      </tr>
    </thead>
     <tbody>
       [[respStmt]]
     </tbody>
  </table>
</div></pb:template>
        </model>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
            <elementSpec ident="witness" mode="add">
                    <model behaviour="inline">
            <param name="siglum" value="@xml:id"/>
            <param name="locus" value="locus/string()"/>
            <param name="letterNr" value="idno[@type eq 'letterNr']/string()"/>
            <pb:template xmlns="" xml:space="preserve"><tr><td>[[siglum]]</td><td>[[locus]]</td><td>[[letterNr]]</td></tr></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="respStmt" mode="add">
                    <model behaviour="inline">
            <param name="when" value="resp/@when"/>
            <param name="role" value="resp/string()"/>
            <param name="name" value="persName/string()"/>
            <pb:template xmlns="" xml:space="preserve"><tr><td>[[when]]</td><td>[[role]]</td><td>[[name]]</td></tr></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="date" mode="change">
                    <model output="print" behaviour="inline"/>
                    <model predicate="$parameters?display=&#34;commentary&#34;" behaviour="inline"/>
                    <model predicate="parent::correspAction and (@notBefore ne @notAfter)" behaviour="inline">
            <param name="notBefore" value="@notBefore"/>
            <param name="notAfter" value="@notAfter"/>
            <pb:template xmlns="" xml:space="preserve">    <tr>
      <th><pb-i18n key="metadata.notBefore"/></th>
      <td>[[notBefore]]</td>
    </tr>
    <tr>
      <th><pb-i18n key="metadata.notAfter"/></th>
      <td>[[notAfter]]</td>
    </tr></pb:template>
        </model>
                    <model predicate="parent::correspAction and (@notBefore eq @notAfter)" behaviour="inline">
            <param name="notBefore" value="@notBefore"/>
            <pb:template xmlns="" xml:space="preserve">    <tr>
      <th><pb-i18n key="metadata.date"/></th>
      <td>[[notBefore]]</td>
    </tr></pb:template>
        </model>
                    <model predicate="@when and not(./string())" behaviour="inline">
            <param name="content" value="@when/string()"/>
        </model>
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@when"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="editionStmt" mode="add">
                    <model predicate="$parameters?header='short'" behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
            <model behaviour="block">
                <param name="content" value="string-join((ancestor::teiHeader//correspAction/placeName, ancestor::teiHeader//correspAction/date), ', ')"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="correspAction" mode="add">
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="fileDesc" mode="change">
                    <modelSequence predicate="$parameters?header='short'">
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="titleStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="editionStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="publicationStmt"/>
            </model>
        </modelSequence>
                    <model behaviour="title">
            <param name="content" value="titleStmt"/>
        </model>
                </elementSpec>
                <elementSpec ident="profileDesc" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
            <elementSpec ident="person" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div>
  [[content]]
</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="parent::place or parent::person" behaviour="block"/>
                    <model predicate="$parameters?person-note=&#34;yes&#34; and @type='bio'" behaviour="block"/>
                    <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                <elementSpec ident="gender" mode="add">
                    <model behaviour="omit"/>
                </elementSpec>
            <elementSpec ident="location" mode="add">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="country" mode="add"/>
                <elementSpec ident="region" mode="add"/>
            <elementSpec ident="place" mode="add">
                    <model behaviour="block">
            <param name="label" value="(placeName[@type='main'], placeName)[1]"/>
            <param name="type" value="let $type := @type let $list := doc($global:data-root || '/registers/place-types.xml') return $list/id($type)"/>
            <param name="country" value="(country, ' ', region)"/>
            <param name="note" value="note"/>
            <param name="geo" value="if (data(location/geo)) then location/geo else ()"/>
            <param name="names" value="let $alt := placeName[not(@type=('main','sort'))]  return string-join(for $i in $alt let $n := normalize-space($i) group by $n return $n[1], '; ')"/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><div>
  <h3>[[label]]</h3>
  [[names]]
  [[note]]
</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="graphic" mode="change">
                    <model behaviour="graphic">
            <param name="url" value="@url"/>
            <param name="width" value="if (@width) then @width else &#34;300px&#34;"/>
            <param name="height" value="if (@height) then @height else ()"/>
            <param name="scale" value="@scale"/>
            <param name="title" value="desc"/>
        </model>
                </elementSpec>

                <elementSpec ident="birth" mode="add">
                    <model behaviour="block">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="floruit"><pb-i18n key="person.birth">Born: </pb-i18n>[[content]]  </span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="death" mode="add">
                    <model behaviour="block">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="floruit"><pb-i18n key="person.death"/>[[content]]  </span></pb:template>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>